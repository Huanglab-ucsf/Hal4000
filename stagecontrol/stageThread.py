#!/usr/bin/python
#
## @file
#
# Generic stage control thread for buffering communication
# with a motorized stage.
#
# Hazen 02/14
#

from PyQt4 import QtCore

## QStageThread
#
# QThread for communication with a motorized stage.
#
# This is necessary for position updates as otherwise
# the periodic communication with the (slow) stage
# will cause the whole UI to behave a bit jerkily.
# The motorized stage class must provide the following methods:
#
# getStatus()
#   Returns True if the stage is alive and running, False otherwise.
#
# goAbsolute(x, y)
#   Go to position x, y (in um)
#
# goRelative(dx, dy)
#   Change position by dx in x, dy in y (in um).
#
# jog(sx, sy)
#   Jog at a speed given by sx, sy in um/second
#
# joystickOnOff(flag)
#   Lockout stage motion (or not).
#
# position()
#   Returns [x, y, z] stage position (in um).
#
# setVelocity(vx, vy)
#   Set maximum stage velocity in x and y (in mm/sec).
#
# shutDown()
#   Cleanup prior to the program quitting.
#
# zero()
#   Define the current position as zero.
#
class QStageThread(QtCore.QThread):
    updatePosition = QtCore.pyqtSignal(float, float, float)

    ## __init__
    #
    # Note: The time resolution of update requests is 5ms.
    #
    # @param stage A stage (hardware) control object.
    # @param move_update_freq Update frequency for move commands in units of 5ms.
    # @param pos_update_freq Frequency of stage position inquiries in units of 5ms
    # @param parent (Optional) The PyQt parent of this object.
    #
    def __init__(self, stage, move_update_freq = 1, pos_update_freq = 100, parent = None):
        QtCore.QThread.__init__(self, parent)
        self.locked_out = False
        self.motion_buffer = []
        self.move_update_freq = move_update_freq
        self.pos_update_freq = pos_update_freq
        self.stage = stage
 
        self.mutex = QtCore.QMutex()
        self.running = self.stage.getStatus()

    ## dragMove
    #
    # This handles "drag" motion events, such as those that are 
    # generated by cameraDisplay. These need to be buffered so 
    # that the stage does not get overwhelmed.
    #
    # @param x the x position in um.
    # @param y the y position in um.
    #
    def dragMove(self, x, y):
        self.mutex.lock()
        self.motion_buffer = ["drag", x, y]
        self.mutex.unlock()
        
    ## getStatus
    #
    # @return True/False if we can actually talk to the stage hardware.
    #
    def getStatus(self):
        return self.running

    ## goAbsolute
    #
    # This type of move is unbuffered.
    #
    # @param x The x position in um.
    # @param y The y position in um.
    #
    def goAbsolute(self, x, y):
        self.mutex.lock()
        self.stage.goAbsolute(x, y)
        self.mutex.unlock()

    ## goRelative
    #
    # @param dx The x displacement in um.
    # @param dy The y displacement in um.
    #
    def goRelative(self, dx, dy):
        self.mutex.lock()
        self.motion_buffer = ["mover", dx, dy]
        self.mutex.unlock()

    ## jog
    #
    # This handles "jog" motion events, such as those that are
    # generated by the joystick.
    #
    # @param x_speed The speed to move in x.
    # @param y_speed The speed to move in y.
    #
    def jog(self, x_speed, y_speed):
        self.mutex.lock()
        self.motion_buffer = ["jog", x_speed, y_speed]
        self.mutex.unlock()

    ## lockout
    #
    # @param flag True/False turn on/off the stage joystick lockout.
    #
    def lockout(self, flag):
        if (flag != self.locked_out):
            self.mutex.lock()
            self.stage.joystickOnOff(not flag)
            self.mutex.unlock()
            self.locked_out = flag

    ## run
    #
    # The stage control thread. Jogs the stage, if requested, and gets
    # the current stage position.
    #
    def run(self):
        counter = 0
        while self.running:
            self.mutex.lock()
            if ((counter % self.move_update_freq) == 0):
                if (len(self.motion_buffer) > 0):
                    [type, mx, my] = self.motion_buffer
                    if (type == "jog"):
                        self.stage.jog(mx, my)
                    elif (type == "mover"):
                        self.stage.goRelative(mx, my)
                    elif (type == "drag"):
                        self.stage.goAbsolute(mx, my)
                    else:
                        print "QStageThread: unknown type", type
                    self.motion_buffer = []

            if ((counter % self.pos_update_freq) == 0):
                position = self.stage.position()
                self.updatePosition.emit(*position)

            counter += 1
            if (counter == 200):
                counter = 0

            self.mutex.unlock()
            self.msleep(5)

    ## setVelocity
    #
    # @param x_vel The stage velocity in x.
    # @param y_vel The stage velocity in y.
    #
    def setVelocity(self, x_vel, y_vel):
        self.mutex.lock()
        self.stage.setVelocity(x_vel, y_vel)
        self.mutex.unlock()

    ## shutDown
    #
    # Stop the thread & close the connection to the stage.
    #
    def shutDown(self):
        self.running = 0
        self.wait()
        self.stage.shutDown()

    ## zero
    #
    # Set the current position as the new stage zero.
    #
    def zero(self):
        self.mutex.lock()
        self.stage.zero()
        self.mutex.unlock()

#
# The MIT License
#
# Copyright (c) 2014 Zhuang Lab, Harvard University
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
